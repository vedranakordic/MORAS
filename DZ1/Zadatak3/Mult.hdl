CHIP Mult{
    IN a[16], b[16];
    OUT out[16];
    
    PARTS:

    // uzimam prvi i zadnju znamenku drugog i mnozim - add
    // shiftam prvi i mnozim s predzadnjom znamenkom itd itd
    // zbrajam sve na kraju


    // mnozenja
    Mux16(a = false, b = a, sel = b[0], out = add1);
    BitShiftL(in = a, out = shift1);
    
   
    Mux16(a = false, b = shift1, sel = b[1], out = add2);
    BitShiftL(in = shift1, out = shift2);
    
  
    Mux16(a = false, b = shift2, sel = b[2], out = add3);
    BitShiftL(in = shift2, out = shift3);
    

    Mux16(a = false, b = shift3, sel = b[3], out = add4);
    BitShiftL(in = shift3, out = shift4);
    
  
    Mux16(a = false, b = shift4, sel = b[4], out = add5);
    BitShiftL(in = shift4, out = shift5);
    
 
    Mux16(a = false, b = shift5, sel = b[5], out = add6);
    BitShiftL(in = shift5, out = shift6);
    

    Mux16(a = false, b = shift6, sel = b[6], out = add7);
    BitShiftL(in = shift6, out = shift7);
    
 
    Mux16(a = false, b = shift7, sel = b[7], out = add8);
    BitShiftL(in = shift7, out = shift8);
    

    Mux16(a = false, b = shift8, sel = b[8], out = add9);
    BitShiftL(in = shift8, out = shift9);
    

    Mux16(a = false, b = shift9, sel = b[9], out = add10);
    BitShiftL(in = shift9, out = shift10);


    Mux16(a = false, b = shift10, sel = b[10], out = add11);
    BitShiftL(in = shift10, out = shift11);
    
   
    Mux16(a = false, b = shift11, sel = b[11], out = add12);
    BitShiftL(in = shift11, out = shift12);
    
    
    Mux16(a = false, b = shift12, sel = b[12], out = add13);
    BitShiftL(in = shift12, out = shift13);
    
    
    Mux16(a = false, b = shift13, sel = b[13], out = add14);
    BitShiftL(in = shift13, out = shift14);
    
    
    Mux16(a = false, b = shift14, sel = b[14], out = add15);
    BitShiftL(in = shift14, out = shift15);
    
    
    Mux16(a = false, b = shift15, sel = b[15], out = add16);
    
    
    // zbrajanja
    
    Add16(a = add1, b = add2, out = zbroj1);
    Add16(a = add3, b = add4, out = zbroj2);
    Add16(a = add5, b = add6, out = zbroj3);
    Add16(a = add7, b = add8, out = zbroj4);
    Add16(a = add9, b = add10, out = zbroj5);
    Add16(a = add11, b = add12, out = zbroj6);
    Add16(a = add13, b = add14, out = zbroj7);
    Add16(a = add15, b = add16, out = zbroj8);
    
    
    Add16(a = zbroj1, b = zbroj2, out = zbr1);
    Add16(a = zbroj3, b = zbroj4, out = zbr2);
    Add16(a = zbroj5, b = zbroj6, out = zbr3);
    Add16(a = zbroj7, b = zbroj8, out = zbr4);
    

    Add16(a = zbr1, b = zbr2, out = out1);
    Add16(a = zbr3, b = zbr4, out = out2);
    
    //konacni rezultat
    Add16(a = out1, b = out2 , out = out);
    
    
    
}